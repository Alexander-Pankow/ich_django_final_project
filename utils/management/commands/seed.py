import random
from datetime import timedelta
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.contrib.auth.models import Group
from faker import Faker
from apps.users.models import User
from apps.listings.models import Listing
from apps.bookings.models import Booking
from apps.reviews.models import Review
from apps.history.models import SearchQuery, ViewHistory

# –ù–µ–º–µ—Ü–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
fake = Faker('de_DE')


class Command(BaseCommand):
    help = '–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ì–µ—Ä–º–∞–Ω–∏–∏'

    def handle(self, *args, **options):
        self.stdout.write('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        Review.objects.all().delete()
        Booking.objects.all().delete()
        Listing.objects.all().delete()
        SearchQuery.objects.all().delete()
        ViewHistory.objects.all().delete()
        User.objects.all().delete()
        Group.objects.all().delete()

        # === –ì—Ä—É–ø–ø—ã ===
        self.stdout.write('üë• –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø...')
        landlord_group, _ = Group.objects.get_or_create(name='Landlords')
        tenant_group, _ = Group.objects.get_or_create(name='Tenants')

        # === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
        self.stdout.write('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ì–µ—Ä–º–∞–Ω–∏—è)...')
        landlords = []
        tenants = []

        for _ in range(5):
            user = User.objects.create_user(
                email=fake.unique.email(),
                first_name=fake.first_name(),
                last_name=fake.last_name(),
                password='securepassword123'
            )
            user.groups.add(landlord_group)
            landlords.append(user)

        for _ in range(12):
            user = User.objects.create_user(
                email=fake.unique.email(),
                first_name=fake.first_name(),
                last_name=fake.last_name(),
                password='securepassword123'
            )
            user.groups.add(tenant_group)
            tenants.append(user)

        # === –û–±—ä—è–≤–ª–µ–Ω–∏—è ===
        self.stdout.write('üè† –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ì–µ—Ä–º–∞–Ω–∏—è)...')
        listings = []
        HOUSING_TYPES = ['apartment', 'house', 'studio']
        GERMAN_CITIES = [
            'Berlin', 'Hamburg', 'M√ºnchen', 'K√∂ln', 'Frankfurt am Main',
            'Stuttgart', 'D√ºsseldorf', 'Leipzig', 'Dortmund', 'Essen'
        ]

        for landlord in landlords:
            for _ in range(random.randint(2, 4)):
                listing = Listing.objects.create(
                    title=fake.sentence(nb_words=4)[:-1],
                    description=fake.text(max_nb_chars=300),
                    city=random.choice(GERMAN_CITIES),
                    street=fake.street_address(),
                    postal_code=fake.postcode(),
                    price=round(random.uniform(600, 3500), 2),  # ‚Ç¨/–º–µ—Å—è—Ü
                    rooms=random.randint(1, 4),
                    housing_type=random.choice(HOUSING_TYPES),
                    is_active=True,
                    owner=landlord
                )
                listings.append(listing)

        # === –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ===
        self.stdout.write('üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (—Å –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–µ–∑–¥–∞/–≤—ã–µ–∑–¥–∞)...')
        bookings = []
        today = timezone.now().date()

        for tenant in tenants:
            num_bookings = random.randint(1, 3)
            sampled_listings = random.sample(listings, k=min(num_bookings, len(listings)))
            for listing in sampled_listings:
                # –î–ª—è —Å–∏–∏–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã
                start_date = today - timedelta(days=random.randint(1, 60))
                nights = random.randint(3, 21)
                end_date = start_date + timedelta(days=nights)

                booking = Booking(
                    listing=listing,
                    tenant=tenant,
                    start_date=start_date,
                    end_date=end_date,
                    status='completed'
                )
                booking.save(skip_past_check=True)  # –æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
                bookings.append(booking)

        # === –û—Ç–∑—ã–≤—ã ===
        self.stdout.write('‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤...')
        reviewable_bookings = [b for b in bookings if b.status in ['confirmed', 'completed']]
        for booking in random.sample(reviewable_bookings, k=min(18, len(reviewable_bookings))):
            Review(
                booking=booking,
                rating=random.randint(4, 5),
                comment=fake.text(max_nb_chars=220)
            ).save(skip_booking_check=True)

        # === –ò—Å—Ç–æ—Ä–∏—è ===
        self.stdout.write('üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤...')
        for tenant in tenants:
            # –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º
            for _ in range(random.randint(4, 7)):
                SearchQuery.objects.create(
                    user=tenant,
                    query=fake.word().lower()
                )
            # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
            for listing in random.sample(listings, k=min(6, len(listings))):
                ViewHistory.objects.create(
                    user=tenant,
                    listing=listing
                )

        self.stdout.write(
            self.style.SUCCESS(
                f'\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ì–µ—Ä–º–∞–Ω–∏–∏!\n'
                f'   üë• –ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–∏: {len(landlords)}\n'
                f'   üë§ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã: {len(tenants)}\n'
                f'   üè† –û–±—ä—è–≤–ª–µ–Ω–∏–π: {len(listings)}\n'
                f'   üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(bookings)}\n'
                f'   ‚≠ê –û—Ç–∑—ã–≤–æ–≤: {Review.objects.count()}\n'
                f'   üí° –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ—é—Ç –≤—Ä–µ–º—è –∑–∞–µ–∑–¥–∞ (14:00) –∏ –≤—ã–µ–∑–¥–∞ (12:00) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.'
            )
        )