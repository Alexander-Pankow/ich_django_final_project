from datetime import timedelta
from django.test import TestCase
from django.contrib.auth.models import Group
from django.urls import reverse
from django.utils import timezone
from rest_framework.test import APITestCase
from rest_framework import status
from .models import Booking
from apps.users.models import User
from apps.listings.models import Listing


class BookingModelTest(TestCase):
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ Booking."""

    def setUp(self):
        Group.objects.get_or_create(name="Landlords")
        Group.objects.get_or_create(name="Tenants")
        self.landlord = User.objects.create_user(
            email="landlord@example.com",
            first_name="Landlord",
            password="pass123"
        )
        self.landlord.groups.add(Group.objects.get(name="Landlords"))
        self.tenant = User.objects.create_user(
            email="tenant@example.com",
            first_name="Tenant",
            password="pass123"
        )
        self.tenant.groups.add(Group.objects.get(name="Tenants"))
        self.listing = Listing.objects.create(
            owner=self.landlord,
            title="Berlin Apartment",
            description="Central location",
            city="Berlin",
            price=1500.00,
            rooms=3,
            housing_type="apartment"
        )

    def test_booking_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        start_date = timezone.now().date() + timedelta(days=10)
        end_date = timezone.now().date() + timedelta(days=12)
        booking = Booking.objects.create(
            listing=self.listing,
            tenant=self.tenant,
            start_date=start_date,
            end_date=end_date
        )
        self.assertEqual(booking.total_price, 3000.00)
        self.assertEqual(booking.status, "pending")

    def test_overlapping_booking_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."""
        start_date = timezone.now().date() + timedelta(days=10)
        end_date = timezone.now().date() + timedelta(days=12)
        Booking.objects.create(
            listing=self.listing,
            tenant=self.tenant,
            start_date=start_date,
            end_date=end_date
        )
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–µ–µ—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        overlapping_start = timezone.now().date() + timedelta(days=11)
        overlapping_end = timezone.now().date() + timedelta(days=13)
        with self.assertRaises(Exception):
            Booking.objects.create(
                listing=self.listing,
                tenant=self.tenant,
                start_date=overlapping_start,
                end_date=overlapping_end
            )

    def test_cannot_book_own_listing(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–µ—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –∂–∏–ª—å—è."""
        start_date = timezone.now().date() + timedelta(days=10)
        end_date = timezone.now().date() + timedelta(days=12)
        with self.assertRaises(Exception):
            Booking.objects.create(
                listing=self.listing,
                tenant=self.landlord,  # –≤–ª–∞–¥–µ–ª–µ—Ü –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –∂–∏–ª—å—ë
                start_date=start_date,
                end_date=end_date
            )


class BookingListViewTest(APITestCase):
    """–¢–µ—Å—Ç—ã —Å–ø–∏—Å–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."""

    def setUp(self):
        Group.objects.get_or_create(name="Landlords")
        Group.objects.get_or_create(name="Tenants")
        self.landlord = User.objects.create_user(
            email="landlord@example.com",
            first_name="Landlord",
            password="pass123"
        )
        self.landlord.groups.add(Group.objects.get(name="Landlords"))
        self.tenant = User.objects.create_user(
            email="tenant@example.com",
            first_name="Tenant",
            password="pass123"
        )
        self.tenant.groups.add(Group.objects.get(name="Tenants"))
        self.listing = Listing.objects.create(
            owner=self.landlord,
            title="Berlin Apartment",
            description="Central location",
            city="Berlin",
            price=1500.00,
            rooms=3,
            housing_type="apartment"
        )

    def test_create_booking_tenant(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º."""
        self.client.force_authenticate(user=self.tenant)
        url = reverse("booking-list")
        start_date = (timezone.now().date() + timedelta(days=10)).isoformat()
        end_date = (timezone.now().date() + timedelta(days=12)).isoformat()
        data = {
            "listing": self.listing.id,
            "start_date": start_date,
            "end_date": end_date
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Booking.objects.count(), 1)
        booking = Booking.objects.first()
        self.assertEqual(booking.tenant, self.tenant)
        self.assertEqual(booking.total_price, 3000.00)

    def test_create_booking_landlord_forbidden(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º."""
        self.client.force_authenticate(user=self.landlord)
        url = reverse("booking-list")
        start_date = (timezone.now().date() + timedelta(days=10)).isoformat()
        end_date = (timezone.now().date() + timedelta(days=12)).isoformat()
        data = {
            "listing": self.listing.id,
            "start_date": start_date,
            "end_date": end_date
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_list_bookings_tenant(self):
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞."""
        self.client.force_authenticate(user=self.tenant)
        # –°–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        start_date = timezone.now().date() + timedelta(days=10)
        end_date = timezone.now().date() + timedelta(days=12)
        Booking.objects.create(
            listing=self.listing,
            tenant=self.tenant,
            start_date=start_date,
            end_date=end_date
        )
        url = reverse("booking-list")
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)

    def test_list_bookings_landlord(self):
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è (–±—Ä–æ–Ω–∏ –Ω–∞ –µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)."""
        self.client.force_authenticate(user=self.landlord)
        # –°–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
        other_tenant = User.objects.create_user(
            email="other@example.com",
            first_name="Other",
            password="pass123"
        )
        other_tenant.groups.add(Group.objects.get(name="Tenants"))
        start_date = timezone.now().date() + timedelta(days=10)
        end_date = timezone.now().date() + timedelta(days=12)
        Booking.objects.create(
            listing=self.listing,
            tenant=other_tenant,
            start_date=start_date,
            end_date=end_date
        )
        url = reverse("booking-list")
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)


class BookingActionViewTest(APITestCase):
    """–¢–µ—Å—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º (cancel/confirm/reject)."""

    def setUp(self):
        # –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—ã
        Group.objects.get_or_create(name="Landlords")
        Group.objects.get_or_create(name="Tenants")

        # –°–æ–∑–¥–∞—ë–º –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è
        self.landlord = User.objects.create_user(
            email="landlord@example.com",
            first_name="Landlord",
            password="ValidPass123!"
        )
        self.landlord.groups.add(Group.objects.get(name="Landlords"))

        # –°–æ–∑–¥–∞—ë–º –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
        self.tenant = User.objects.create_user(
            email="tenant@example.com",
            first_name="Tenant",
            password="ValidPass123!"
        )
        self.tenant.groups.add(Group.objects.get(name="Tenants"))

        # üëá –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–∏ –ø–µ—Ä–º–∏—à–µ–Ω—ã
        self.landlord.tenant = None
        self.tenant.tenant = self.tenant

        # –°–æ–∑–¥–∞—ë–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        self.listing = Listing.objects.create(
            owner=self.landlord,
            title="Berlin Apartment",
            description="Central location",
            city="Berlin",
            price=1500.00,
            rooms=3,
            housing_type="apartment"
        )

        # –°–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.booking = Booking.objects.create(
            listing=self.listing,
            tenant=self.tenant,
            start_date=timezone.now().date() + timedelta(days=10),
            end_date=timezone.now().date() + timedelta(days=12)
        )

    def test_cancel_booking_tenant(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º (–∑–∞ 7+ –¥–Ω–µ–π)."""
        self.client.force_authenticate(user=self.tenant)
        url = reverse("booking-action", args=[self.booking.id, "cancel"])
        response = self.client.patch(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.booking.refresh_from_db()
        self.assertEqual(self.booking.status, "cancelled")

    def test_cancel_booking_too_late(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ —á–µ–º –∑–∞ 7 –¥–Ω–µ–π –¥–æ –∑–∞–µ–∑–¥–∞."""
        self.booking.start_date = timezone.now().date() + timedelta(days=3)
        self.booking.save()
        self.client.force_authenticate(user=self.tenant)
        url = reverse("booking-action", args=[self.booking.id, "cancel"])
        response = self.client.patch(url)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    def test_confirm_booking_landlord(self):
        """–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º."""
        self.client.force_authenticate(user=self.landlord)
        url = reverse("booking-action", args=[self.booking.id, "confirm"])
        response = self.client.patch(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.booking.refresh_from_db()
        self.assertEqual(self.booking.status, "confirmed")

    def test_reject_booking_landlord(self):
        """–¢–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º."""
        self.client.force_authenticate(user=self.landlord)
        url = reverse("booking-action", args=[self.booking.id, "reject"])
        response = self.client.patch(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.booking.refresh_from_db()
        self.assertEqual(self.booking.status, "cancelled")

    def test_cancel_booking_landlord_forbidden(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–µ—Ç–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º."""
        self.client.force_authenticate(user=self.landlord)
        url = reverse("booking-action", args=[self.booking.id, "cancel"])
        response = self.client.patch(url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_confirm_booking_tenant_forbidden(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–µ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º."""
        self.client.force_authenticate(user=self.tenant)
        url = reverse("booking-action", args=[self.booking.id, "confirm"])
        response = self.client.patch(url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_invalid_action(self):
        """–¢–µ—Å—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
        self.client.force_authenticate(user=self.tenant)
        url = reverse("booking-action", args=[self.booking.id, "invalid"])
        response = self.client.patch(url)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)


# –∑–∞–ø—É—Å–∫ python manage.py test apps.bookings